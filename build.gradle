plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
}

apply plugin: 'java'

group = 'com.rct.humanresources'
version = '0.0.1-SNAPSHOT'
description = "Spring - WebFlux - Human Resources Application Template"

ext {
	blockHoundVersion = '1.0.15.RELEASE'
	jetBrainsAnnotationsVersion = '26.0.2-1'
	logbackVersion = '1.5.19'
	lombokVersion = '1.18.42'
	lombokMapStructVersion = '0.2.0'
	mapStructVersion = '1.6.3'
	reactorVersion = '3.8.0-RC1'
	slf4jVersion = '2.0.17'
	springBootVersion = '3.5.6'
	springContextVersion = '7.0.0-RC1'
	springCoreVersion = '7.0.0-RC1'
	springDocOpenApiVersion = '3.0.0-M1'
	springMongoReactiveVersion = '3.5.6'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
}

javadoc{
	destinationDir = file("${projectDir}/build/docs/javadoc")
	exclude "com.rct.core.service"
}

java {
	sourceCompatibility = JavaVersion.VERSION_25
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(25))
	}
}

jar {
	manifest {
		attributes(
				'Automatic-Module-Name': 'org.springdoc.openapi.webflux.ui'
		)
	}
}

repositories {
	mavenCentral()
}

dependencies {

	implementation "org.springframework:spring-context:${springContextVersion}"
	implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:${springMongoReactiveVersion}"
	implementation "org.jetbrains:annotations:${jetBrainsAnnotationsVersion}"
	implementation "org.mapstruct:mapstruct:${mapStructVersion}"
	implementation "org.projectlombok:lombok-mapstruct-binding:${lombokMapStructVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:${springDocOpenApiVersion}"
	implementation "io.projectreactor:reactor-tools:${reactorVersion}"
	implementation "org.slf4j:slf4j-api:${slf4jVersion}"
	implementation "io.projectreactor.tools:blockhound:${blockHoundVersion}"
	implementation "ch.qos.logback:logback-core:${logbackVersion}"

	compileOnly "org.projectlombok:lombok:${lombokVersion}"

	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapStructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

	testAnnotationProcessor "org.mapstruct:mapstruct:${mapStructVersion}"

//	testImplementation "io.projectreactor.tools:blockhound-junit-platform:${blockHoundVersion}"
	testImplementation "io.projectreactor:reactor-test:${reactorVersion}"
	testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"

}

tasks.named('test') {
	useJUnitPlatform()
}
tasks.withType(Test).configureEach {
	if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_25)) {
		jvmArgs += [
				"-XX:+AllowRedefinitionToAddDeleteMethods",
				"-XX:+EnableDynamicAgentLoading"
		]

	}
}
test {
	jvmArgs '-XX:+AllowRedefinitionToAddDeleteMethods'
}
